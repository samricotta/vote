// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: samricotta/vote/vote/v1/types.proto

package vote

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	VotingPeriod uint64      `protobuf:"varint,1,opt,name=voting_period,json=votingPeriod,proto3" json:"voting_period,omitempty"`
	MinEntryFee  *types.Coin `protobuf:"bytes,2,opt,name=min_entry_fee,json=minEntryFee,proto3" json:"min_entry_fee,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d59127d6ef6249a, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetVotingPeriod() uint64 {
	if m != nil {
		return m.VotingPeriod
	}
	return 0
}

func (m *Params) GetMinEntryFee() *types.Coin {
	if m != nil {
		return m.MinEntryFee
	}
	return nil
}

type Vote struct {
	Id        uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Options   []string               `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d59127d6ef6249a, []int{1}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vote) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Vote) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Vote) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type ResolveVote struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WinningOption string `protobuf:"bytes,2,opt,name=winning_option,json=winningOption,proto3" json:"winning_option,omitempty"`
	FundsAmount   int64  `protobuf:"varint,3,opt,name=funds_amount,json=fundsAmount,proto3" json:"funds_amount,omitempty"`
}

func (m *ResolveVote) Reset()         { *m = ResolveVote{} }
func (m *ResolveVote) String() string { return proto.CompactTextString(m) }
func (*ResolveVote) ProtoMessage()    {}
func (*ResolveVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d59127d6ef6249a, []int{2}
}
func (m *ResolveVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolveVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResolveVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResolveVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveVote.Merge(m, src)
}
func (m *ResolveVote) XXX_Size() int {
	return m.Size()
}
func (m *ResolveVote) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveVote.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveVote proto.InternalMessageInfo

func (m *ResolveVote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResolveVote) GetWinningOption() string {
	if m != nil {
		return m.WinningOption
	}
	return ""
}

func (m *ResolveVote) GetFundsAmount() int64 {
	if m != nil {
		return m.FundsAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "samricotta.vote.vote.v1.Params")
	proto.RegisterType((*Vote)(nil), "samricotta.vote.vote.v1.Vote")
	proto.RegisterType((*ResolveVote)(nil), "samricotta.vote.vote.v1.ResolveVote")
}

func init() {
	proto.RegisterFile("samricotta/vote/vote/v1/types.proto", fileDescriptor_4d59127d6ef6249a)
}

var fileDescriptor_4d59127d6ef6249a = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x50, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0x4e, 0x27, 0x71, 0xd7, 0x74, 0x36, 0x0b, 0x0e, 0x82, 0xb3, 0x01, 0xc7, 0x6c, 0x16, 0x21,
	0x78, 0xe8, 0x26, 0x8a, 0x07, 0x15, 0x0f, 0x2a, 0x7a, 0x75, 0x19, 0xc4, 0x83, 0x97, 0xa1, 0x27,
	0xd3, 0x19, 0x1b, 0xb6, 0xbb, 0x86, 0xe9, 0x4a, 0x74, 0x5f, 0xc1, 0xd3, 0x3e, 0x83, 0x4f, 0xe0,
	0x63, 0x78, 0xdc, 0xa3, 0x47, 0x49, 0x0e, 0xbe, 0x86, 0xf4, 0x4f, 0x10, 0x24, 0xb0, 0x97, 0xea,
	0xfe, 0xbe, 0xfa, 0xaa, 0xf8, 0xea, 0xa3, 0x67, 0x56, 0xe8, 0x56, 0x2d, 0x00, 0x51, 0xf0, 0x35,
	0xa0, 0x8c, 0x65, 0xce, 0xf1, 0xb2, 0x91, 0x96, 0x35, 0x2d, 0x20, 0x24, 0xf7, 0xfe, 0x89, 0x98,
	0xeb, 0xc7, 0x32, 0x1f, 0xdf, 0x11, 0x5a, 0x19, 0xe0, 0xbe, 0x06, 0xed, 0x38, 0x5b, 0x80, 0xd5,
	0x60, 0x79, 0x29, 0xac, 0xdb, 0x53, 0x4a, 0x14, 0x73, 0xbe, 0x00, 0x65, 0x62, 0xff, 0x6e, 0x0d,
	0x35, 0xf8, 0x2f, 0x77, 0xbf, 0xc8, 0x3e, 0xa8, 0x01, 0xea, 0x0b, 0xc9, 0x3d, 0x2a, 0x57, 0x4b,
	0x8e, 0x4a, 0x4b, 0x8b, 0x42, 0x37, 0x51, 0x70, 0x12, 0xd6, 0x16, 0x61, 0x32, 0x80, 0xd0, 0x9a,
	0x5e, 0x11, 0x7a, 0x70, 0x2e, 0x5a, 0xa1, 0x6d, 0x72, 0x46, 0x47, 0x6b, 0x40, 0x65, 0xea, 0xa2,
	0x91, 0xad, 0x82, 0x2a, 0x25, 0x13, 0x32, 0xeb, 0xe7, 0x47, 0x81, 0x3c, 0xf7, 0x5c, 0xf2, 0x92,
	0x8e, 0xb4, 0x32, 0x85, 0x34, 0xd8, 0x5e, 0x16, 0x4b, 0x29, 0xd3, 0xee, 0x84, 0xcc, 0x86, 0x8f,
	0x4f, 0x58, 0xdc, 0xea, 0x9c, 0xb3, 0xe8, 0x9c, 0xbd, 0x01, 0x65, 0xf2, 0xa1, 0x56, 0xe6, 0xad,
	0x93, 0xbf, 0x93, 0xf2, 0xf9, 0xf4, 0xdb, 0x9f, 0x1f, 0x8f, 0xee, 0xff, 0x1f, 0xdb, 0xd7, 0xf0,
	0x04, 0x1f, 0xd3, 0xef, 0x84, 0xf6, 0x3f, 0x02, 0xca, 0xe4, 0x98, 0x76, 0xd5, 0xce, 0x45, 0x57,
	0x55, 0x49, 0x4a, 0x0f, 0xa1, 0x41, 0x05, 0xc6, 0xa6, 0xdd, 0x49, 0x6f, 0x36, 0xc8, 0x77, 0x30,
	0x79, 0x46, 0xa9, 0x45, 0xd1, 0x62, 0xe1, 0x2e, 0x4f, 0xfb, 0xde, 0xd2, 0x98, 0x85, 0x58, 0xd8,
	0x2e, 0x16, 0xf6, 0x61, 0x17, 0x4b, 0x3e, 0xf0, 0x6a, 0x87, 0x93, 0xa7, 0xf4, 0xb6, 0x34, 0x55,
	0x18, 0xbc, 0x75, 0xe3, 0xe0, 0xa1, 0x34, 0x95, 0x43, 0xd3, 0x9a, 0x0e, 0x73, 0x69, 0xe1, 0x62,
	0x2d, 0xf7, 0x5a, 0x7d, 0x48, 0x8f, 0xbf, 0x28, 0x63, 0x5c, 0x98, 0xc1, 0xa3, 0xcf, 0x69, 0x90,
	0x8f, 0x22, 0xfb, 0xde, 0x93, 0xc9, 0x29, 0x3d, 0x5a, 0xae, 0x4c, 0x65, 0x0b, 0xa1, 0x61, 0x65,
	0x30, 0xed, 0x4d, 0xc8, 0xac, 0x97, 0x0f, 0x3d, 0xf7, 0xca, 0x53, 0xaf, 0x5f, 0xfc, 0xdc, 0x64,
	0xe4, 0x7a, 0x93, 0x91, 0xdf, 0x9b, 0x8c, 0x5c, 0x6d, 0xb3, 0xce, 0xf5, 0x36, 0xeb, 0xfc, 0xda,
	0x66, 0x9d, 0x4f, 0xa7, 0xb5, 0xc2, 0xcf, 0xab, 0x92, 0x2d, 0x40, 0xf3, 0xfd, 0x89, 0x96, 0x07,
	0xfe, 0x84, 0x27, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x92, 0xe4, 0x4f, 0xa9, 0x02, 0x00,
	0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinEntryFee != nil {
		{
			size, err := m.MinEntryFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VotingPeriod != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.VotingPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Options[iNdEx])
			copy(dAtA[i:], m.Options[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.Options[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResolveVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolveVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolveVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundsAmount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.FundsAmount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WinningOption) > 0 {
		i -= len(m.WinningOption)
		copy(dAtA[i:], m.WinningOption)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.WinningOption)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VotingPeriod != 0 {
		n += 1 + sovTypes(uint64(m.VotingPeriod))
	}
	if m.MinEntryFee != nil {
		l = m.MinEntryFee.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ResolveVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.WinningOption)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.FundsAmount != 0 {
		n += 1 + sovTypes(uint64(m.FundsAmount))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPeriod", wireType)
			}
			m.VotingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEntryFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinEntryFee == nil {
				m.MinEntryFee = &types.Coin{}
			}
			if err := m.MinEntryFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &timestamppb.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &timestamppb.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolveVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolveVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolveVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningOption", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WinningOption = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundsAmount", wireType)
			}
			m.FundsAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundsAmount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
