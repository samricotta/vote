syntax = "proto3";
package samricotta.vote.crs.v1;

option go_package = "github.com/samricotta/vote/x/vote";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";
import "samricotta/vote/vote/v1/types.proto";

// Service Msg defines the RPC methods available for the voting system.
service Msg {
  rpc MsgNewVote(MsgNewVote) returns (MsgNewVoteResponse);
  rpc ResolveVote(ResolveVote) returns (ResolveVoteResponse);
}

message MsgNewVote {
  uint64 id = 1;
  repeated string options = 2;
  string entry_fee = 3; 
  bool refund = 4;     
  string send_funds_to = 5;  // Escrow or module account to hold funds
}

message ResolveVote {
  uint64 id = 1;
}

message ResolveVoteResponse {
  string winning_option = 1;
  string funds = 2;  
}
