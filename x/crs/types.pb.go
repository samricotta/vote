// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: samricotta/vote/crs/v1/types.proto

package crs

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters of the module.
type Params struct {
	CommitTimeout uint64 `protobuf:"varint,1,opt,name=commit_timeout,json=commitTimeout,proto3" json:"commit_timeout,omitempty"`
	RevealTimeout uint64 `protobuf:"varint,2,opt,name=reveal_timeout,json=revealTimeout,proto3" json:"reveal_timeout,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3e2f47a7b17e15, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCommitTimeout() uint64 {
	if m != nil {
		return m.CommitTimeout
	}
	return 0
}

func (m *Params) GetRevealTimeout() uint64 {
	if m != nil {
		return m.RevealTimeout
	}
	return 0
}

type NewDecision struct {
	Id            uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EntryFee      types.Coin `protobuf:"bytes,2,opt,name=entry_fee,json=entryFee,proto3" json:"entry_fee"`
	VotingOptions []string   `protobuf:"bytes,3,rep,name=voting_options,json=votingOptions,proto3" json:"voting_options,omitempty"`
	CommitTimeout time.Time  `protobuf:"bytes,4,opt,name=commit_timeout,json=commitTimeout,proto3,stdtime" json:"commit_timeout"`
	RevealTimeout time.Time  `protobuf:"bytes,5,opt,name=reveal_timeout,json=revealTimeout,proto3,stdtime" json:"reveal_timeout"`
}

func (m *NewDecision) Reset()         { *m = NewDecision{} }
func (m *NewDecision) String() string { return proto.CompactTextString(m) }
func (*NewDecision) ProtoMessage()    {}
func (*NewDecision) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3e2f47a7b17e15, []int{1}
}
func (m *NewDecision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewDecision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewDecision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewDecision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewDecision.Merge(m, src)
}
func (m *NewDecision) XXX_Size() int {
	return m.Size()
}
func (m *NewDecision) XXX_DiscardUnknown() {
	xxx_messageInfo_NewDecision.DiscardUnknown(m)
}

var xxx_messageInfo_NewDecision proto.InternalMessageInfo

func (m *NewDecision) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewDecision) GetEntryFee() types.Coin {
	if m != nil {
		return m.EntryFee
	}
	return types.Coin{}
}

func (m *NewDecision) GetVotingOptions() []string {
	if m != nil {
		return m.VotingOptions
	}
	return nil
}

func (m *NewDecision) GetCommitTimeout() time.Time {
	if m != nil {
		return m.CommitTimeout
	}
	return time.Time{}
}

func (m *NewDecision) GetRevealTimeout() time.Time {
	if m != nil {
		return m.RevealTimeout
	}
	return time.Time{}
}

type Commit struct {
	Commit    string    `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Commit) Reset()         { *m = Commit{} }
func (m *Commit) String() string { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()    {}
func (*Commit) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3e2f47a7b17e15, []int{2}
}
func (m *Commit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commit.Merge(m, src)
}
func (m *Commit) XXX_Size() int {
	return m.Size()
}
func (m *Commit) XXX_DiscardUnknown() {
	xxx_messageInfo_Commit.DiscardUnknown(m)
}

var xxx_messageInfo_Commit proto.InternalMessageInfo

func (m *Commit) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Commit) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type Reveal struct {
	Option    string    `protobuf:"bytes,1,opt,name=option,proto3" json:"option,omitempty"`
	CreatedAt time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *Reveal) Reset()         { *m = Reveal{} }
func (m *Reveal) String() string { return proto.CompactTextString(m) }
func (*Reveal) ProtoMessage()    {}
func (*Reveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ca3e2f47a7b17e15, []int{3}
}
func (m *Reveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reveal.Merge(m, src)
}
func (m *Reveal) XXX_Size() int {
	return m.Size()
}
func (m *Reveal) XXX_DiscardUnknown() {
	xxx_messageInfo_Reveal.DiscardUnknown(m)
}

var xxx_messageInfo_Reveal proto.InternalMessageInfo

func (m *Reveal) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

func (m *Reveal) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*Params)(nil), "samricotta.vote.crs.v1.Params")
	proto.RegisterType((*NewDecision)(nil), "samricotta.vote.crs.v1.NewDecision")
	proto.RegisterType((*Commit)(nil), "samricotta.vote.crs.v1.Commit")
	proto.RegisterType((*Reveal)(nil), "samricotta.vote.crs.v1.Reveal")
}

func init() {
	proto.RegisterFile("samricotta/vote/crs/v1/types.proto", fileDescriptor_ca3e2f47a7b17e15)
}

var fileDescriptor_ca3e2f47a7b17e15 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0x87, 0xb3, 0x49, 0x0c, 0x66, 0x4a, 0x0a, 0x2e, 0x52, 0xd2, 0x20, 0x9b, 0x18, 0x10, 0x4a,
	0x0f, 0x33, 0x44, 0x6f, 0xc5, 0x8b, 0xa9, 0x88, 0x27, 0x0d, 0x4b, 0x4f, 0x5e, 0x96, 0xd9, 0xc9,
	0xdb, 0x75, 0xa4, 0xb3, 0x6f, 0xd8, 0x99, 0xac, 0xe6, 0x2b, 0x78, 0xea, 0xa7, 0x10, 0x8f, 0xfd,
	0x18, 0x3d, 0xf6, 0xe8, 0x49, 0x25, 0x39, 0xf4, 0x6b, 0xc8, 0xfc, 0x89, 0x62, 0xeb, 0xa5, 0xe0,
	0x65, 0x99, 0xf7, 0x9d, 0xdf, 0x3b, 0xcf, 0xec, 0xc3, 0x90, 0xb1, 0xe6, 0xaa, 0x92, 0x02, 0x8d,
	0xe1, 0xac, 0x46, 0x03, 0x4c, 0x54, 0x9a, 0xd5, 0x13, 0x66, 0x56, 0x0b, 0xd0, 0x74, 0x51, 0xa1,
	0xc1, 0x78, 0xef, 0x4f, 0x86, 0xda, 0x0c, 0x15, 0x95, 0xa6, 0xf5, 0x64, 0xf0, 0x80, 0x2b, 0x59,
	0x22, 0x73, 0x5f, 0x1f, 0x1d, 0x24, 0x02, 0xb5, 0x42, 0xcd, 0x72, 0xae, 0x81, 0xd5, 0x93, 0x1c,
	0x0c, 0x9f, 0x30, 0x81, 0xb2, 0x0c, 0xfb, 0x0f, 0x0b, 0x2c, 0xd0, 0x2d, 0x99, 0x5d, 0x85, 0xee,
	0xb0, 0x40, 0x2c, 0xce, 0x80, 0xb9, 0x2a, 0x5f, 0x9e, 0x32, 0x23, 0x15, 0x68, 0xc3, 0xd5, 0x22,
	0x04, 0xf6, 0xfd, 0xb1, 0x99, 0x9f, 0xf4, 0x85, 0xdf, 0x1a, 0xaf, 0x48, 0x67, 0xc6, 0x2b, 0xae,
	0x74, 0xfc, 0x84, 0xec, 0x0a, 0x54, 0x4a, 0x9a, 0xcc, 0x8e, 0xe3, 0xd2, 0xf4, 0xa3, 0x51, 0x74,
	0xd0, 0x4e, 0x7b, 0xbe, 0x7b, 0xe2, 0x9b, 0x36, 0x56, 0x41, 0x0d, 0xfc, 0xec, 0x77, 0xac, 0xe9,
	0x63, 0xbe, 0x1b, 0x62, 0x47, 0x8f, 0x3f, 0x5f, 0x5f, 0x1c, 0x3e, 0xba, 0x69, 0xe7, 0x93, 0xf3,
	0xe3, 0x81, 0xe3, 0x2f, 0x4d, 0xb2, 0xf3, 0x06, 0x3e, 0xbe, 0x04, 0x21, 0xb5, 0xc4, 0x32, 0xde,
	0x25, 0x4d, 0x39, 0x0f, 0xd0, 0xa6, 0x9c, 0xc7, 0xcf, 0x49, 0x17, 0x4a, 0x53, 0xad, 0xb2, 0x53,
	0x00, 0x07, 0xd9, 0x79, 0xba, 0x4f, 0xc3, 0xe5, 0xad, 0x20, 0x1a, 0x04, 0xd1, 0x63, 0x94, 0xe5,
	0xb4, 0x7d, 0xf9, 0x7d, 0xd8, 0x48, 0xef, 0xbb, 0x89, 0x57, 0x00, 0xf6, 0x9e, 0x35, 0x1a, 0x59,
	0x16, 0x19, 0x2e, 0x8c, 0xc4, 0x52, 0xf7, 0x5b, 0xa3, 0xd6, 0x41, 0x37, 0xed, 0xf9, 0xee, 0x5b,
	0xdf, 0x8c, 0x67, 0xb7, 0xfe, 0xba, 0xed, 0x48, 0x03, 0xea, 0xa5, 0xd2, 0xad, 0x54, 0x7a, 0xb2,
	0x95, 0x3a, 0xed, 0x59, 0xd4, 0xf9, 0x8f, 0x61, 0xf4, 0xf5, 0xfa, 0xe2, 0x30, 0xba, 0x29, 0x68,
	0x76, 0x4b, 0xd0, 0xbd, 0x3b, 0x9f, 0xf8, 0x97, 0xcb, 0xf1, 0x07, 0xd2, 0x39, 0x76, 0x88, 0x78,
	0x8f, 0x74, 0x3c, 0xcc, 0x69, 0xea, 0xa6, 0xa1, 0x8a, 0x5f, 0x13, 0x22, 0x2a, 0xe0, 0x06, 0xe6,
	0x19, 0x37, 0xfd, 0xd6, 0x5d, 0x79, 0xdd, 0x30, 0xfc, 0xc2, 0xb1, 0x52, 0x07, 0xb7, 0x2c, 0x6f,
	0x6e, 0xcb, 0xf2, 0xd5, 0xff, 0x63, 0x4d, 0x8f, 0x2e, 0xd7, 0x49, 0x74, 0xb5, 0x4e, 0xa2, 0x9f,
	0xeb, 0x24, 0x3a, 0xdf, 0x24, 0x8d, 0xab, 0x4d, 0xd2, 0xf8, 0xb6, 0x49, 0x1a, 0xef, 0x46, 0x85,
	0x34, 0xef, 0x97, 0x39, 0x15, 0xa8, 0xd8, 0x3f, 0xdf, 0x50, 0xde, 0x71, 0xa4, 0x67, 0xbf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x4a, 0x76, 0x40, 0x2d, 0x81, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevealTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RevealTimeout))
		i--
		dAtA[i] = 0x10
	}
	if m.CommitTimeout != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CommitTimeout))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewDecision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewDecision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewDecision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RevealTimeout, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RevealTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTypes(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CommitTimeout, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CommitTimeout):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTypes(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	if len(m.VotingOptions) > 0 {
		for iNdEx := len(m.VotingOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotingOptions[iNdEx])
			copy(dAtA[i:], m.VotingOptions[iNdEx])
			i = encodeVarintTypes(dAtA, i, uint64(len(m.VotingOptions[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.EntryFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Commit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Reveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintTypes(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if len(m.Option) > 0 {
		i -= len(m.Option)
		copy(dAtA[i:], m.Option)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Option)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitTimeout != 0 {
		n += 1 + sovTypes(uint64(m.CommitTimeout))
	}
	if m.RevealTimeout != 0 {
		n += 1 + sovTypes(uint64(m.RevealTimeout))
	}
	return n
}

func (m *NewDecision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = m.EntryFee.Size()
	n += 1 + l + sovTypes(uint64(l))
	if len(m.VotingOptions) > 0 {
		for _, s := range m.VotingOptions {
			l = len(s)
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CommitTimeout)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RevealTimeout)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Commit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *Reveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Option)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeout", wireType)
			}
			m.CommitTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeout", wireType)
			}
			m.RevealTimeout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealTimeout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewDecision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewDecision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewDecision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingOptions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingOptions = append(m.VotingOptions, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CommitTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RevealTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Option = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
