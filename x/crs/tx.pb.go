// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: samricotta/vote/crs/v1/tx.proto

package crs

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgNewDecision represents a request to create a new decision-making process.
type MsgNewDecision struct {
	// id of the decision
	Voter string `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	// address to which send the entry_prices to at the end
	Refund bool `protobuf:"varint,2,opt,name=refund,proto3" json:"refund,omitempty"`
	// time in which the commit can be done
	CommitDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=commit_duration,json=commitDuration,proto3" json:"commit_duration,omitempty"`
	// time in which the reveal can be done
	RevealDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=reveal_duration,json=revealDuration,proto3" json:"reveal_duration,omitempty"`
	// entry price for the decision
	EntryFee types.Coin `protobuf:"bytes,5,opt,name=entry_fee,json=entryFee,proto3" json:"entry_fee"`
	// options for the decision for example political candidate names
	VotingOptions [][]byte `protobuf:"bytes,6,rep,name=voting_options,json=votingOptions,proto3" json:"voting_options,omitempty"`
	// address to which send the entry_prices to at the end
	SendFundsTo []byte `protobuf:"bytes,7,opt,name=send_funds_to,json=sendFundsTo,proto3" json:"send_funds_to,omitempty"`
	// commit is the hex encoded commitment to the first move.
	// hex encoded sha256 of "election:option" which one was voted on
	Commit string `protobuf:"bytes,8,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (m *MsgNewDecision) Reset()         { *m = MsgNewDecision{} }
func (m *MsgNewDecision) String() string { return proto.CompactTextString(m) }
func (*MsgNewDecision) ProtoMessage()    {}
func (*MsgNewDecision) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{0}
}
func (m *MsgNewDecision) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewDecision) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewDecision.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewDecision) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewDecision.Merge(m, src)
}
func (m *MsgNewDecision) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewDecision) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewDecision.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewDecision proto.InternalMessageInfo

func (m *MsgNewDecision) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

func (m *MsgNewDecision) GetRefund() bool {
	if m != nil {
		return m.Refund
	}
	return false
}

func (m *MsgNewDecision) GetCommitDuration() *durationpb.Duration {
	if m != nil {
		return m.CommitDuration
	}
	return nil
}

func (m *MsgNewDecision) GetRevealDuration() *durationpb.Duration {
	if m != nil {
		return m.RevealDuration
	}
	return nil
}

func (m *MsgNewDecision) GetEntryFee() types.Coin {
	if m != nil {
		return m.EntryFee
	}
	return types.Coin{}
}

func (m *MsgNewDecision) GetVotingOptions() [][]byte {
	if m != nil {
		return m.VotingOptions
	}
	return nil
}

func (m *MsgNewDecision) GetSendFundsTo() []byte {
	if m != nil {
		return m.SendFundsTo
	}
	return nil
}

func (m *MsgNewDecision) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

type MsgNewDecisionResponse struct {
	// id of the decision
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewDecisionResponse) Reset()         { *m = MsgNewDecisionResponse{} }
func (m *MsgNewDecisionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewDecisionResponse) ProtoMessage()    {}
func (*MsgNewDecisionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{1}
}
func (m *MsgNewDecisionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewDecisionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewDecisionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewDecisionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewDecisionResponse.Merge(m, src)
}
func (m *MsgNewDecisionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewDecisionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewDecisionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewDecisionResponse proto.InternalMessageInfo

func (m *MsgNewDecisionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgCommit struct {
	// id of the decision
	NewDecisionId uint64 `protobuf:"varint,1,opt,name=new_decision_id,json=newDecisionId,proto3" json:"new_decision_id,omitempty"`
	// hash of the commit
	Commit []byte `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	// time in which the commit can be done
	Voter string `protobuf:"bytes,3,opt,name=voter,proto3" json:"voter,omitempty"`
}

func (m *MsgCommit) Reset()         { *m = MsgCommit{} }
func (m *MsgCommit) String() string { return proto.CompactTextString(m) }
func (*MsgCommit) ProtoMessage()    {}
func (*MsgCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{2}
}
func (m *MsgCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommit.Merge(m, src)
}
func (m *MsgCommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommit proto.InternalMessageInfo

func (m *MsgCommit) GetNewDecisionId() uint64 {
	if m != nil {
		return m.NewDecisionId
	}
	return 0
}

func (m *MsgCommit) GetCommit() []byte {
	if m != nil {
		return m.Commit
	}
	return nil
}

func (m *MsgCommit) GetVoter() string {
	if m != nil {
		return m.Voter
	}
	return ""
}

type MsgCommitResponse struct {
}

func (m *MsgCommitResponse) Reset()         { *m = MsgCommitResponse{} }
func (m *MsgCommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCommitResponse) ProtoMessage()    {}
func (*MsgCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{3}
}
func (m *MsgCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCommitResponse.Merge(m, src)
}
func (m *MsgCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCommitResponse proto.InternalMessageInfo

type MsgReveal struct {
	// id of the decision
	NewDecisionId uint64 `protobuf:"varint,1,opt,name=new_decision_id,json=newDecisionId,proto3" json:"new_decision_id,omitempty"`
	// address of the voter
	Voter []byte `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	// reveal of the Decision
	Selection           uint64 `protobuf:"varint,3,opt,name=selection,proto3" json:"selection,omitempty"`
	ElectionPlaceholder string `protobuf:"bytes,4,opt,name=election_placeholder,json=electionPlaceholder,proto3" json:"election_placeholder,omitempty"`
}

func (m *MsgReveal) Reset()         { *m = MsgReveal{} }
func (m *MsgReveal) String() string { return proto.CompactTextString(m) }
func (*MsgReveal) ProtoMessage()    {}
func (*MsgReveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{4}
}
func (m *MsgReveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReveal.Merge(m, src)
}
func (m *MsgReveal) XXX_Size() int {
	return m.Size()
}
func (m *MsgReveal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReveal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReveal proto.InternalMessageInfo

func (m *MsgReveal) GetNewDecisionId() uint64 {
	if m != nil {
		return m.NewDecisionId
	}
	return 0
}

func (m *MsgReveal) GetVoter() []byte {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *MsgReveal) GetSelection() uint64 {
	if m != nil {
		return m.Selection
	}
	return 0
}

func (m *MsgReveal) GetElectionPlaceholder() string {
	if m != nil {
		return m.ElectionPlaceholder
	}
	return ""
}

type MsgRevealResponse struct {
}

func (m *MsgRevealResponse) Reset()         { *m = MsgRevealResponse{} }
func (m *MsgRevealResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRevealResponse) ProtoMessage()    {}
func (*MsgRevealResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{5}
}
func (m *MsgRevealResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRevealResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRevealResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRevealResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRevealResponse.Merge(m, src)
}
func (m *MsgRevealResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRevealResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRevealResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRevealResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module
	// NOTE: Defaults to the governance module unless overwritten.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa6da43a89c90fa9, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewDecision)(nil), "samricotta.vote.crs.v1.MsgNewDecision")
	proto.RegisterType((*MsgNewDecisionResponse)(nil), "samricotta.vote.crs.v1.MsgNewDecisionResponse")
	proto.RegisterType((*MsgCommit)(nil), "samricotta.vote.crs.v1.MsgCommit")
	proto.RegisterType((*MsgCommitResponse)(nil), "samricotta.vote.crs.v1.MsgCommitResponse")
	proto.RegisterType((*MsgReveal)(nil), "samricotta.vote.crs.v1.MsgReveal")
	proto.RegisterType((*MsgRevealResponse)(nil), "samricotta.vote.crs.v1.MsgRevealResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "samricotta.vote.crs.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "samricotta.vote.crs.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("samricotta/vote/crs/v1/tx.proto", fileDescriptor_fa6da43a89c90fa9) }

var fileDescriptor_fa6da43a89c90fa9 = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xbf, 0x4f, 0xdb, 0x4c,
	0x18, 0x8e, 0x93, 0x90, 0x8f, 0x5c, 0x20, 0x08, 0x13, 0x81, 0x89, 0x3e, 0x99, 0x7c, 0x96, 0x3e,
	0x48, 0x91, 0x6a, 0x2b, 0x54, 0xea, 0x80, 0xba, 0x10, 0x10, 0x52, 0x87, 0xb4, 0xc8, 0xfd, 0x31,
	0x74, 0xb1, 0x1c, 0xfb, 0x70, 0x4e, 0x8a, 0x7d, 0xd1, 0xdd, 0x25, 0xc0, 0xd8, 0x0e, 0x1d, 0x3a,
	0xf5, 0x8f, 0xe8, 0xd0, 0x91, 0xa1, 0x7b, 0x87, 0x2e, 0x8c, 0xa8, 0x53, 0xa7, 0xaa, 0x82, 0x81,
	0x7f, 0xa3, 0x3a, 0xdf, 0xd9, 0x4e, 0x68, 0x09, 0x59, 0x22, 0xbf, 0xef, 0xfb, 0xbc, 0xcf, 0xbd,
	0xcf, 0xbd, 0x4f, 0x0e, 0x6c, 0x50, 0x37, 0x24, 0xc8, 0xc3, 0x8c, 0xb9, 0xd6, 0x08, 0x33, 0x68,
	0x79, 0x84, 0x5a, 0xa3, 0x96, 0xc5, 0x4e, 0xcd, 0x01, 0xc1, 0x0c, 0xab, 0xab, 0x19, 0xc0, 0xe4,
	0x00, 0xd3, 0x23, 0xd4, 0x1c, 0xb5, 0xea, 0xb5, 0x00, 0x07, 0x38, 0x86, 0x58, 0xfc, 0x4b, 0xa0,
	0xeb, 0x6b, 0x1e, 0xa6, 0x21, 0xa6, 0x56, 0x48, 0x03, 0xce, 0x12, 0xd2, 0x40, 0x16, 0xd6, 0x45,
	0xc1, 0x11, 0x1d, 0x22, 0x90, 0x25, 0x3d, 0xc0, 0x38, 0xe8, 0x43, 0x2b, 0x8e, 0xba, 0xc3, 0x63,
	0xcb, 0x1f, 0x12, 0x97, 0x21, 0x1c, 0x25, 0x75, 0xc9, 0xd9, 0x75, 0x29, 0xb4, 0x46, 0xad, 0x2e,
	0x64, 0x6e, 0xcb, 0xf2, 0x30, 0x4a, 0xea, 0xcb, 0x6e, 0x88, 0x22, 0x6c, 0xc5, 0xbf, 0x32, 0x65,
	0xdc, 0xa5, 0xea, 0x6c, 0x00, 0xe5, 0xb1, 0xc6, 0xdb, 0x02, 0xa8, 0x76, 0x68, 0xf0, 0x0c, 0x9e,
	0x1c, 0x40, 0x0f, 0x51, 0x84, 0x23, 0xd5, 0x04, 0x73, 0x1c, 0x4d, 0x34, 0xa5, 0xa1, 0x34, 0xcb,
	0x6d, 0xed, 0xfb, 0x97, 0x87, 0x35, 0x39, 0xea, 0x9e, 0xef, 0x13, 0x48, 0xe9, 0x0b, 0x46, 0x50,
	0x14, 0xd8, 0x02, 0xa6, 0xae, 0x82, 0x12, 0x81, 0xc7, 0xc3, 0xc8, 0xd7, 0xf2, 0x0d, 0xa5, 0x39,
	0x6f, 0xcb, 0x48, 0x6d, 0x83, 0x25, 0x0f, 0x87, 0x21, 0x62, 0x4e, 0x22, 0x45, 0x2b, 0x34, 0x94,
	0x66, 0x65, 0x67, 0xdd, 0x14, 0x5a, 0xcd, 0x44, 0xab, 0x79, 0x20, 0x01, 0x76, 0x55, 0x74, 0x24,
	0x31, 0xe7, 0x20, 0x70, 0x04, 0xdd, 0x7e, 0xc6, 0x51, 0xbc, 0x97, 0x43, 0x74, 0xa4, 0x1c, 0x4f,
	0x40, 0x19, 0x46, 0x8c, 0x9c, 0x39, 0xc7, 0x10, 0x6a, 0x73, 0xb2, 0x5b, 0x0a, 0xe2, 0xb7, 0x69,
	0xca, 0xdb, 0x34, 0xf7, 0x31, 0x8a, 0xda, 0xc5, 0x8b, 0x9f, 0x1b, 0x39, 0x7b, 0x3e, 0xee, 0x38,
	0x84, 0x50, 0xfd, 0x1f, 0x54, 0x47, 0x98, 0xa1, 0x28, 0x70, 0xf0, 0x80, 0xd3, 0x51, 0xad, 0xd4,
	0x28, 0x34, 0x17, 0xec, 0x45, 0x91, 0x7d, 0x2e, 0x92, 0xaa, 0x01, 0x16, 0x29, 0x8c, 0x7c, 0x87,
	0x2b, 0xa7, 0x0e, 0xc3, 0xda, 0x3f, 0x0d, 0xa5, 0xb9, 0x60, 0x57, 0x78, 0xf2, 0x90, 0xe7, 0x5e,
	0x62, 0x7e, 0x51, 0x42, 0x9e, 0x36, 0xcf, 0x6f, 0xd6, 0x96, 0x91, 0xd1, 0x04, 0xab, 0x93, 0x2b,
	0xb0, 0x21, 0x1d, 0xe0, 0x88, 0x42, 0xb5, 0x0a, 0xf2, 0xc8, 0x8f, 0xf7, 0x50, 0xb4, 0xf3, 0xc8,
	0x37, 0x3e, 0x29, 0xa0, 0xdc, 0xa1, 0xc1, 0x7e, 0xdc, 0xa7, 0x6e, 0x82, 0xa5, 0x08, 0x9e, 0x38,
	0xbe, 0xec, 0x72, 0x52, 0xe8, 0x62, 0x94, 0x71, 0x3d, 0xf5, 0xc7, 0xce, 0xcd, 0xc7, 0x43, 0xc9,
	0x28, 0x5b, 0x74, 0x61, 0xa6, 0x45, 0xef, 0x6e, 0xbd, 0xbb, 0x39, 0xdf, 0x16, 0xdf, 0x1f, 0x6e,
	0xce, 0xb7, 0xb5, 0x31, 0x7b, 0x71, 0x67, 0xa5, 0x83, 0x19, 0x2b, 0x60, 0x39, 0x0d, 0x12, 0x2d,
	0xc6, 0x37, 0x31, 0xbb, 0x1d, 0x2f, 0x67, 0xe6, 0xd9, 0x6b, 0xc9, 0x8c, 0x62, 0x74, 0x69, 0xb9,
	0x7f, 0x41, 0x99, 0xc2, 0x3e, 0xf4, 0x52, 0x53, 0x15, 0xed, 0x2c, 0xa1, 0xb6, 0x40, 0x2d, 0xf9,
	0x76, 0x06, 0x7d, 0xd7, 0x83, 0x3d, 0xdc, 0xf7, 0x21, 0x89, 0x9d, 0x53, 0xb6, 0x57, 0x92, 0xda,
	0x51, 0x56, 0x9a, 0x41, 0x9a, 0x98, 0x5b, 0x4a, 0x13, 0x41, 0x2a, 0xed, 0xab, 0x02, 0x96, 0x3a,
	0x34, 0x78, 0x35, 0xf0, 0x5d, 0x06, 0x8f, 0x5c, 0xe2, 0x86, 0x54, 0x7d, 0x0c, 0xca, 0xee, 0x90,
	0xf5, 0x30, 0x41, 0xec, 0xec, 0xde, 0x7f, 0x52, 0x06, 0x55, 0xf7, 0x40, 0x69, 0x10, 0x33, 0xc4,
	0x8a, 0x2b, 0x3b, 0xba, 0xf9, 0xf7, 0xa7, 0xc7, 0x14, 0xe7, 0xb4, 0xcb, 0xdc, 0xaf, 0x9f, 0x6f,
	0xce, 0xb7, 0x15, 0x5b, 0x36, 0xee, 0xb6, 0xb8, 0x98, 0x8c, 0x92, 0x0b, 0xd2, 0xff, 0x14, 0x34,
	0x3e, 0xad, 0xb1, 0x0e, 0xd6, 0x6e, 0xa5, 0x12, 0x71, 0x3b, 0xef, 0x0b, 0xa0, 0xd0, 0xa1, 0x81,
	0x0a, 0x41, 0x65, 0xfc, 0x95, 0xd8, 0xbc, 0x6b, 0xae, 0x49, 0x2b, 0xd7, 0xcd, 0xd9, 0x70, 0xa9,
	0xe5, 0x5f, 0x83, 0x92, 0xb4, 0xf7, 0x7f, 0x53, 0x3a, 0x05, 0xa4, 0xfe, 0xe0, 0x5e, 0xc8, 0x38,
	0xaf, 0xb4, 0xde, 0x34, 0x5e, 0x01, 0x99, 0xca, 0x3b, 0xb9, 0x7b, 0xb5, 0x07, 0x16, 0x26, 0xf6,
	0xbe, 0x35, 0xa5, 0x75, 0x1c, 0x58, 0xb7, 0x66, 0x04, 0x26, 0x27, 0xb5, 0x77, 0x2f, 0xae, 0x74,
	0xe5, 0xf2, 0x4a, 0x57, 0x7e, 0x5d, 0xe9, 0xca, 0xc7, 0x6b, 0x3d, 0x77, 0x79, 0xad, 0xe7, 0x7e,
	0x5c, 0xeb, 0xb9, 0x37, 0x8d, 0x00, 0xb1, 0xde, 0xb0, 0x6b, 0x7a, 0x38, 0xb4, 0x6e, 0xbf, 0xf9,
	0xa7, 0x7c, 0xdf, 0xdd, 0x52, 0xfc, 0x4c, 0x3e, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xfa,
	0xa5, 0x87, 0xe9, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	NewDecision(ctx context.Context, in *MsgNewDecision, opts ...grpc.CallOption) (*MsgNewDecisionResponse, error)
	Commit(ctx context.Context, in *MsgCommit, opts ...grpc.CallOption) (*MsgCommitResponse, error)
	Reveal(ctx context.Context, in *MsgReveal, opts ...grpc.CallOption) (*MsgRevealResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewDecision(ctx context.Context, in *MsgNewDecision, opts ...grpc.CallOption) (*MsgNewDecisionResponse, error) {
	out := new(MsgNewDecisionResponse)
	err := c.cc.Invoke(ctx, "/samricotta.vote.crs.v1.Msg/NewDecision", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Commit(ctx context.Context, in *MsgCommit, opts ...grpc.CallOption) (*MsgCommitResponse, error) {
	out := new(MsgCommitResponse)
	err := c.cc.Invoke(ctx, "/samricotta.vote.crs.v1.Msg/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Reveal(ctx context.Context, in *MsgReveal, opts ...grpc.CallOption) (*MsgRevealResponse, error) {
	out := new(MsgRevealResponse)
	err := c.cc.Invoke(ctx, "/samricotta.vote.crs.v1.Msg/Reveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/samricotta.vote.crs.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	NewDecision(context.Context, *MsgNewDecision) (*MsgNewDecisionResponse, error)
	Commit(context.Context, *MsgCommit) (*MsgCommitResponse, error)
	Reveal(context.Context, *MsgReveal) (*MsgRevealResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewDecision(ctx context.Context, req *MsgNewDecision) (*MsgNewDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDecision not implemented")
}
func (*UnimplementedMsgServer) Commit(ctx context.Context, req *MsgCommit) (*MsgCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedMsgServer) Reveal(ctx context.Context, req *MsgReveal) (*MsgRevealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reveal not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewDecision)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samricotta.vote.crs.v1.Msg/NewDecision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewDecision(ctx, req.(*MsgNewDecision))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samricotta.vote.crs.v1.Msg/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Commit(ctx, req.(*MsgCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Reveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReveal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Reveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samricotta.vote.crs.v1.Msg/Reveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Reveal(ctx, req.(*MsgReveal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samricotta.vote.crs.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "samricotta.vote.crs.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewDecision",
			Handler:    _Msg_NewDecision_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Msg_Commit_Handler,
		},
		{
			MethodName: "Reveal",
			Handler:    _Msg_Reveal_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samricotta/vote/crs/v1/tx.proto",
}

func (m *MsgNewDecision) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewDecision) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewDecision) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SendFundsTo) > 0 {
		i -= len(m.SendFundsTo)
		copy(dAtA[i:], m.SendFundsTo)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SendFundsTo)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.VotingOptions) > 0 {
		for iNdEx := len(m.VotingOptions) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VotingOptions[iNdEx])
			copy(dAtA[i:], m.VotingOptions[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.VotingOptions[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.EntryFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.RevealDuration != nil {
		{
			size, err := m.RevealDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CommitDuration != nil {
		{
			size, err := m.CommitDuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Refund {
		i--
		if m.Refund {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewDecisionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewDecisionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewDecisionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Commit) > 0 {
		i -= len(m.Commit)
		copy(dAtA[i:], m.Commit)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Commit)))
		i--
		dAtA[i] = 0x12
	}
	if m.NewDecisionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewDecisionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ElectionPlaceholder) > 0 {
		i -= len(m.ElectionPlaceholder)
		copy(dAtA[i:], m.ElectionPlaceholder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ElectionPlaceholder)))
		i--
		dAtA[i] = 0x22
	}
	if m.Selection != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Selection))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.NewDecisionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewDecisionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRevealResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRevealResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRevealResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewDecision) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Refund {
		n += 2
	}
	if m.CommitDuration != nil {
		l = m.CommitDuration.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RevealDuration != nil {
		l = m.RevealDuration.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.EntryFee.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.VotingOptions) > 0 {
		for _, b := range m.VotingOptions {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.SendFundsTo)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewDecisionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewDecisionId != 0 {
		n += 1 + sovTx(uint64(m.NewDecisionId))
	}
	l = len(m.Commit)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewDecisionId != 0 {
		n += 1 + sovTx(uint64(m.NewDecisionId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Selection != 0 {
		n += 1 + sovTx(uint64(m.Selection))
	}
	l = len(m.ElectionPlaceholder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRevealResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewDecision) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewDecision: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewDecision: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refund", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Refund = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CommitDuration == nil {
				m.CommitDuration = &durationpb.Duration{}
			}
			if err := m.CommitDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RevealDuration == nil {
				m.RevealDuration = &durationpb.Duration{}
			}
			if err := m.RevealDuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingOptions", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VotingOptions = append(m.VotingOptions, make([]byte, postIndex-iNdEx))
			copy(m.VotingOptions[len(m.VotingOptions)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendFundsTo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendFundsTo = append(m.SendFundsTo[:0], dAtA[iNdEx:postIndex]...)
			if m.SendFundsTo == nil {
				m.SendFundsTo = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewDecisionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewDecisionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewDecisionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDecisionId", wireType)
			}
			m.NewDecisionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewDecisionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commit = append(m.Commit[:0], dAtA[iNdEx:postIndex]...)
			if m.Commit == nil {
				m.Commit = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDecisionId", wireType)
			}
			m.NewDecisionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewDecisionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selection", wireType)
			}
			m.Selection = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selection |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionPlaceholder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ElectionPlaceholder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRevealResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRevealResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRevealResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
