syntax = "proto3";
package samricotta.crs.v1;

option go_package = "github.com/samricotta/vote/x/crs";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "samricotta/crs/v1/types.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";

// Service Msg defines the RPC methods available for the commit-reveal scheme system.
service Msg {
  rpc CreateDecision(MsgCreateDecision) returns (MsgCreateDecisionResponse);
  rpc Commit(MsgCommit) returns (MsgCommitResponse);
  rpc Reveal(MsgReveal) returns (MsgRevealResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCreateDecision represents a request to create a new decision-making process.
message MsgCreateDecision {
  option (cosmos.msg.v1.signer) = "sender";

  // creator of the decision, can be a user or a module
  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // options for the decision for example political candidate names or game moves.
  // It can also be empty to allow use cases like a price oracle or a RNG.
  repeated bytes options = 2;
  // time in which the commit can be done in seconds
  uint64 commit_duration = 3;
  // time in which the reveal can be done in seconds
  uint64 reveal_duration = 4;
  // entry price for the decision
  cosmos.base.v1beta1.Coin entry_fee = 5 [ (gogoproto.nullable) = false ];
  // if the entry fee should be refunded to participants after the reveal period ends
  bool refund = 6;
  // address to which send the entry fees to, if refund is true, only the fees of the
  // participants which NOT revealed will be sent to this address (sort of a slashing)
  bytes send_funds_to = 7;
}

message MsgCreateDecisionResponse {
  // id of the decision, must be provided in the commit and reveal messages
  uint64 id = 1;
}

message MsgCommit {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id of the decision
  uint64 decision_id = 2;
  // hash of the commit, must be sha256(decision_id + ":" + option_chosen + ":" + salt)
  // salt must be exactly 32 bytes
  bytes commit = 3;
}

message MsgCommitResponse {}

message MsgReveal {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // id of the decision to reveal
  uint64 decision_id = 2;
 // salt used in the commit
  bytes salt = 3;
  // option chosen
  bytes option_chosen = 4;
}

message MsgRevealResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module
  // NOTE: Defaults to the governance module unless overwritten.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
