syntax = "proto3";
package samricotta.crs.v1;

option go_package = "github.com/samricotta/vote/x/crs";

import "cosmos/base/query/v1beta1/pagination.proto";
import "samricotta/crs/v1/types.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";

// Msg defines the module Msg service.
service Query {
  // Counter returns the current counter value.
  rpc Decision(QueryDecisionRequest) returns (QueryDecisionResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/samricotta/crs/v1/decision/{id}";
  }

  // Params returns the module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/samricotta/crs/v1/params";
  }
}

message QueryDecisionRequest {
  // id defines the id of the decision to query for.
  uint64 id = 1;
}

message QueryDecisionResponse {
  // decision defines the decision for the given id.
  Decision decision = 1;
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
