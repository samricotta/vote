syntax = "proto3";
package samricotta.election.v1;

option go_package = "github.com/samricotta/vote/x/election";

import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";
import "samricotta/election/v1/types.proto";

// Service Msg defines the RPC methods available for the voting system.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc NewElection(MsgNewElection) returns (MsgNewElectionResponse);
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

message MsgNewElection {
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated string options = 2;
}

message MsgNewElectionResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address that controls the module
  // NOTE: Defaults to the governance module unless overwritten.
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // params defines the module parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
